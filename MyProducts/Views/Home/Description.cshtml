@{
    ViewData["Title"] = "Описание реализации веб-приложения";
}
    <div class="text-justify">
        <div class="text-center">
            <h3 class="display-4">My Products</h3>
        </div>
        <div>
            <p class="prgf">
                Приложение реализовано с помощью фреймворка <b>ASP.NET Core</b>  на языке <b>C#</b> платформы <b>.NET Core</b>. В качестве
                СУБД была выбрана <b>Microsoft SQL Server</b>, а ORM-инструмент - <b>Entity Framework Core</b>. Архитектурный шаблон <b>MVC</b> позволил
                структурировать части программы на Модели, Представления и Контроллеры.
            </p>
        </div>
        <div>
            <div class="text-center">
                <h3 class="display-4">Описание моделей</h3>
            </div>
            <p class="prgf">
                База данных приложения состоит из четырёх таблиц: Товары, Поставщики, Прайс Лист и Расходы. Диаграмма моделей:
            </p>
            <p class="text-center">
                <img src="~/Images/Diagram.png" width="70%" height="70%" />
            </p>
            <p class="prgf">
                В соответствии с этими моделями, созданы четыре класса C#. Каждый из них имеет необходимые свойства и методы доступа. При помощи атрибутов
                валидации Required производится проверка правильности введённых данных.
            </p>
        </div>
        <div>
            <div class="text-center">
                <h3 class="display-4">Описание контроллеров</h3>
            </div>
            <p class="prgf">
                Для обеспечения связи между моделями и представлениями используются контроллеры. Для каждой модели используются свои котроллеры,
                в которых есть четыре основных действия:
                <ul>
                    <li>Запись;</li>
                    <li>Чтение;</li>
                    <li>Редактирование;</li>
                    <li>Удаление.</li>
                </ul>
            </p>
            <p class="prgf">
                Каждое действие обрабатывает какой-то конкретный запрос пользователя. К примеру, метод <b>Create()</b> типа <b>[HttpPost]</b> для контроллера
                <b>ProductsController</b> записывает данные в таблицу <b>Products</b>, если те пройдут валидацию. В другом случае пользователю будет возвращено
                представление формы.
            </p>
            <p class="prgf">
                Для действий с базой данных используется <b>Entity Framework Core</b>. Чтобы работать с ним необходимо создать класс, который характеризует
                контекст базы данных. В нашем случае он называется <b>DataBaseContext.cs</b>. Он имеет несколько свойств - наборы сущностей, хранящихся в
                БД. Каждый элемент набора соответствует моделям классов, которые были созданы ранее.
            </p>
            <p class="prgf">
                Таким образом, в контроллере создаётся поле - переменная контекста базы данных, с помощью которой и производится запись, чтение,
                редактирование и удаление сущностей в БД. К примеру, для метода действия <b>Index</b>, контроллера <b>ProvidersController</b>, который
                выполняет действие "чтения" из БД, необходимо обратиться к контексту БД, конкретному набору сущностей и, с помощью метода <b>ToList()</b>,
                получить список из сущностей <b>Providers</b>. Далее этот список передаётся представлению.
            </p>
        </div>
        <div>
            <div class="text-center">
                <h3 class="display-4">Описание представлений</h3>
            </div>
            <p class="prgf">
                Представлениями в данном приложении являются файлы с расширение <b>cshtml</b> - смесь <b>HTML</b> и <b>Razor</b> конструкций, которые
                позволяют переходить к языку <b>C#</b>, непосредственно, в самом представлении. В качестве примера можно взять представление
                <b>Index.cshtml</b> контроллера <b>PriceListController</b>. Эта страница отображает данные из базы данных, находящиеся в таблице
                <b>PriceList</b>. Пример результата загрузки такой страницы:
            </p>
            <p class="text-center">
                <img src="~/Images/12.png" width="70%" height="70%" />
            </p>
            <p class="prgf">
                В данном случае представление получает модель <b>IEnumerable&lt;MyProducts.Models.PriceList&gt;</b> в виде 
                обобщённого интерфейса, благодаря которому можно работать в циклах <b>foreach</b>. В представлении создаётся таблица средствами <b>HTML</b> с 
                нужными заголовками и телом, в котором циклом выводяться все сущности модели <b>PriceList</b>.
            </p>
        </div>
    </div>
